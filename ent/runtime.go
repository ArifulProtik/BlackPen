// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ArifulProtik/BlackPen/ent/auth"
	"github.com/ArifulProtik/BlackPen/ent/comment"
	"github.com/ArifulProtik/BlackPen/ent/notes"
	"github.com/ArifulProtik/BlackPen/ent/schema"
	"github.com/ArifulProtik/BlackPen/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authFields := schema.Auth{}.Fields()
	_ = authFields
	// authDescIsBlocked is the schema descriptor for is_blocked field.
	authDescIsBlocked := authFields[2].Descriptor()
	// auth.DefaultIsBlocked holds the default value on creation for the is_blocked field.
	auth.DefaultIsBlocked = authDescIsBlocked.Default.(bool)
	// authDescCreatedAt is the schema descriptor for created_at field.
	authDescCreatedAt := authFields[3].Descriptor()
	// auth.DefaultCreatedAt holds the default value on creation for the created_at field.
	auth.DefaultCreatedAt = authDescCreatedAt.Default.(func() time.Time)
	// authDescID is the schema descriptor for id field.
	authDescID := authFields[0].Descriptor()
	// auth.DefaultID holds the default value on creation for the id field.
	auth.DefaultID = authDescID.Default.(func() uuid.UUID)
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescBody is the schema descriptor for body field.
	commentDescBody := commentFields[1].Descriptor()
	// comment.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	comment.BodyValidator = commentDescBody.Validators[0].(func(string) error)
	// commentDescCreatedAt is the schema descriptor for created_at field.
	commentDescCreatedAt := commentFields[3].Descriptor()
	// comment.DefaultCreatedAt holds the default value on creation for the created_at field.
	comment.DefaultCreatedAt = commentDescCreatedAt.Default.(time.Time)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentFields[0].Descriptor()
	// comment.DefaultID holds the default value on creation for the id field.
	comment.DefaultID = commentDescID.Default.(func() uuid.UUID)
	notesFields := schema.Notes{}.Fields()
	_ = notesFields
	// notesDescTitle is the schema descriptor for title field.
	notesDescTitle := notesFields[1].Descriptor()
	// notes.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	notes.TitleValidator = notesDescTitle.Validators[0].(func(string) error)
	// notesDescBody is the schema descriptor for body field.
	notesDescBody := notesFields[2].Descriptor()
	// notes.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	notes.BodyValidator = notesDescBody.Validators[0].(func(string) error)
	// notesDescSlug is the schema descriptor for slug field.
	notesDescSlug := notesFields[4].Descriptor()
	// notes.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	notes.SlugValidator = notesDescSlug.Validators[0].(func(string) error)
	// notesDescFImage is the schema descriptor for f_image field.
	notesDescFImage := notesFields[5].Descriptor()
	// notes.FImageValidator is a validator for the "f_image" field. It is called by the builders before save.
	notes.FImageValidator = notesDescFImage.Validators[0].(func(string) error)
	// notesDescCreatedAt is the schema descriptor for created_at field.
	notesDescCreatedAt := notesFields[6].Descriptor()
	// notes.DefaultCreatedAt holds the default value on creation for the created_at field.
	notes.DefaultCreatedAt = notesDescCreatedAt.Default.(func() time.Time)
	// notesDescID is the schema descriptor for id field.
	notesDescID := notesFields[0].Descriptor()
	// notes.DefaultID holds the default value on creation for the id field.
	notes.DefaultID = notesDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[5].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[6].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
