// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/ArifulProtik/BlackPen/ent/auth"
	"github.com/ArifulProtik/BlackPen/ent/schema"
	"github.com/ArifulProtik/BlackPen/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authFields := schema.Auth{}.Fields()
	_ = authFields
	// authDescIP is the schema descriptor for ip field.
	authDescIP := authFields[2].Descriptor()
	// auth.IPValidator is a validator for the "ip" field. It is called by the builders before save.
	auth.IPValidator = authDescIP.Validators[0].(func(string) error)
	// authDescIsBlocked is the schema descriptor for is_blocked field.
	authDescIsBlocked := authFields[3].Descriptor()
	// auth.DefaultIsBlocked holds the default value on creation for the is_blocked field.
	auth.DefaultIsBlocked = authDescIsBlocked.Default.(bool)
	// authDescID is the schema descriptor for id field.
	authDescID := authFields[0].Descriptor()
	// auth.DefaultID holds the default value on creation for the id field.
	auth.DefaultID = authDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[2].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[5].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
