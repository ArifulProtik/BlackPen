// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ArifulProtik/BlackPen/ent/notes"
	"github.com/ArifulProtik/BlackPen/ent/user"
	"github.com/google/uuid"
)

// Notes is the model entity for the Notes schema.
type Notes struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// FImage holds the value of the "f_image" field.
	FImage string `json:"f_image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotesQuery when eager-loading is set.
	Edges       NotesEdges `json:"edges"`
	user_notess *uuid.UUID
}

// NotesEdges holds the relations/edges for other nodes in the graph.
type NotesEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NotesEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notes) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notes.FieldTags:
			values[i] = new([]byte)
		case notes.FieldTitle, notes.FieldBody, notes.FieldSlug, notes.FieldFImage:
			values[i] = new(sql.NullString)
		case notes.FieldCreatedAt, notes.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case notes.FieldID:
			values[i] = new(uuid.UUID)
		case notes.ForeignKeys[0]: // user_notess
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notes", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notes fields.
func (n *Notes) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notes.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case notes.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				n.Title = value.String
			}
		case notes.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				n.Body = value.String
			}
		case notes.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &n.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case notes.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				n.Slug = value.String
			}
		case notes.FieldFImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f_image", values[i])
			} else if value.Valid {
				n.FImage = value.String
			}
		case notes.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				n.CreatedAt = value.Time
			}
		case notes.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				n.UpdatedAt = value.Time
			}
		case notes.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_notess", values[i])
			} else if value.Valid {
				n.user_notess = new(uuid.UUID)
				*n.user_notess = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the Notes entity.
func (n *Notes) QueryAuthor() *UserQuery {
	return (&NotesClient{config: n.config}).QueryAuthor(n)
}

// Update returns a builder for updating this Notes.
// Note that you need to call Notes.Unwrap() before calling this method if this Notes
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notes) Update() *NotesUpdateOne {
	return (&NotesClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notes) Unwrap() *Notes {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notes is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notes) String() string {
	var builder strings.Builder
	builder.WriteString("Notes(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", title=")
	builder.WriteString(n.Title)
	builder.WriteString(", body=")
	builder.WriteString(n.Body)
	builder.WriteString(", tags=")
	builder.WriteString(fmt.Sprintf("%v", n.Tags))
	builder.WriteString(", slug=")
	builder.WriteString(n.Slug)
	builder.WriteString(", f_image=")
	builder.WriteString(n.FImage)
	builder.WriteString(", created_at=")
	builder.WriteString(n.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(n.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NotesSlice is a parsable slice of Notes.
type NotesSlice []*Notes

func (n NotesSlice) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
